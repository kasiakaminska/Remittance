<?xml version="1.0" encoding="UTF-8"?>
<beans
     xmlns="http://www.springframework.org/schema/beans"
     xmlns:beans="http://www.springframework.org/schema/beans"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:cc="http://www.capeclear.com/assembly/10"
     xmlns:cloud="urn:com.workday/esb/cloud/10.0"
     xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"
     xmlns:pi="urn:com.workday/picof"
     xmlns:wd="urn:com.workday/bsvc"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 
	<cc:assembly id="WorkdayAssembly" version="2017.35">
        <cc:workday-in id="StartHere" routes-to="InitParms">
            <cc:integration-system name="Supplier Remittance PDF">
        <cloud:param name="File Reference GL">
          <cloud:type>
            <cloud:simple-type>number</cloud:simple-type>
          </cloud:type>
          <cloud:default/>
        </cloud:param>
        <cloud:attribute-map-service name="Supplier Remittance PDF Attributes">
          <cloud:attribute name="Document Retention">
            <cloud:type>
              <cloud:simple-type>number</cloud:simple-type>
            </cloud:type>
            <cloud:display-option>required-for-launch</cloud:display-option>
          </cloud:attribute>
        </cloud:attribute-map-service>
        <cloud:sequence-generator-service name="Supplier Remittance PDF Sequence Generator">
          <cloud:sequencer>Filename</cloud:sequencer>
        </cloud:sequence-generator-service>
        <cloud:report-service name="CR Supplier Invoice - Info2">
          <cloud:report-alias description="CR Supplier Invoice - Info" name="SupInfo ">
            <cloud:report-reference description="CR Supplier Invoice - Info" type="WID">83d023125cf801749ae291b75f273214</cloud:report-reference>
          </cloud:report-alias>
        </cloud:report-service>
        <cloud:service-reference name="WPN - Remittance Service"/>
      </cc:integration-system>
        </cc:workday-in>
        <cc:async-mediation id="InitParms" routes-to="call-getRemitInfo">
            <cc:steps>
                <cc:eval id="Props"><cc:expression>props['p.error'] = false</cc:expression><cc:expression>props['current.datetime'] = parts[0].xpath(&quot;current-dateTime()&quot;)</cc:expression><cc:expression>props['current.date'] = props['current.datetime'].substring(0,10)</cc:expression><cc:expression>props['lp.remit'] = lp.getSimpleData('WPN - Remittance Service','Remittance File Reference')</cc:expression><cc:expression>props['seqgen.filename'] = 'No.'</cc:expression>
                    <cc:expression>//props['lp.remit'] = '1855'  // Set this value as needed for Debugging in Studio </cc:expression>
                    <cc:expression>props['claimSet']= new java.util.HashMap();</cc:expression>
                    <cc:expression>props['descSet']= new java.util.HashMap();</cc:expression>
                    <cc:expression>props['keyHash'] = 1</cc:expression></cc:eval>
                <cc:eval id="Attribs"><cc:expression>props['ia.document.retention'] = intsys.getAttribute('Document Retention')</cc:expression></cc:eval>
                <cc:validate-exp id="ValidateExp">
                    <cc:expression failure-message="Remittance File ID not retrieved.">props['lp.remit'] != empty</cc:expression>
                </cc:validate-exp>
            </cc:steps>
            <cc:send-error id="SendError" routes-to="call-handleError1"/>
        </cc:async-mediation>
        <cc:local-out id="call-handleError1" store-message="none" endpoint="vm://Supplier_Remittance_PDF/handleError"/>
        <cc:async-mediation id="prcsError">
            <cc:steps>
                <cc:eval id="Eval"><cc:expression>props['p.error'] = true</cc:expression>
                    <cc:expression>context.setAbort(true)</cc:expression></cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:local-out id="pimErrorMsg" routes-response-to="prcsError" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.message.severity" value="'ERROR'"/>
            <cc:set name="is.message.summary" value="'Error processing Remittance due to ' + util.cleanString(context.getErrorMessage())&#x9;"/>
        </cc:local-out>
        <cc:local-in id="handleError" routes-to="pimErrorMsg"/>
        <cc:workday-out-soap id="getPymnt-WWS" routes-response-to="SplitPayments" application="Cash_Management" version="29.0"/>
        <cc:async-mediation id="writePymntMsg" routes-to="getPymnt-WWS" handle-downstream-errors="true">
            <cc:steps>
                <cc:write id="Write">
                    <cc:message>
                        <cc:text>&lt;?xml version='1.0' encoding='UTF-8'?>&#xD;
&lt;env:Envelope xmlns:env=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;>&#xD;
    &lt;env:Body>&#xD;
        &lt;wd:Get_Payments_Request xmlns:wd=&quot;urn:com.workday/bsvc&quot; wd:version=&quot;v29.0&quot;>&#xD;
            &lt;wd:Request_Criteria>&#xD;
                &lt;wd:Remittance_File_Criteria>&#xD;
                    &lt;wd:Remittance_File_Reference>&#xD;
                        &lt;wd:ID wd:type=&quot;Remittance_File_ID&quot;>@{props['lp.remit']}&lt;/wd:ID>&#xD;
                    &lt;/wd:Remittance_File_Reference>&#xD;
                &lt;/wd:Remittance_File_Criteria>&#xD;
            &lt;/wd:Request_Criteria>&#xD;
            &lt;wd:Response_Group>&#xD;
                &lt;wd:Include_Reference>true&lt;/wd:Include_Reference>&#xD;
                &lt;wd:Include_Originating_Bank_Data>true&lt;/wd:Include_Originating_Bank_Data>&#xD;
                &lt;wd:Include_Payment_Group_Data>true&lt;/wd:Include_Payment_Group_Data>&#xD;
                &lt;wd:Include_Payroll_Remittance_Data>true&lt;/wd:Include_Payroll_Remittance_Data>&#xD;
                &lt;wd:Include_Payroll_Result_Country_Data>true&lt;/wd:Include_Payroll_Result_Country_Data>&#xD;
            &lt;/wd:Response_Group>&#xD;
        &lt;/wd:Get_Payments_Request>&#xD;
    &lt;/env:Body>&#xD;
&lt;/env:Envelope></cc:text>
                    </cc:message>
                </cc:write>
            </cc:steps>
            <cc:send-error id="SendError" routes-to="call-handleError2"/>
        </cc:async-mediation>
        <cc:splitter id="SplitPayments">
            <cc:sub-route name="SubRoute" routes-to="RemitInfo"/>
            <cc:xml-stream-splitter xpath="env:Envelope/env:Body/wd:Get_Payments_Response/wd:Response_Data/wd:Payment"/>
        </cc:splitter>
        <cc:local-out id="call-handleError2" store-message="none" endpoint="vm://Supplier_Remittance_PDF/handleError" propagate-abort="true"/>
        <cc:local-out id="PIMInfoMsg" routes-response-to="call-produceRemit" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="'Processing remittance for supplier ' + props['p.supplier.name'] + ' for settlement run number ' + props['p.set.run.num'] + props['test']"/>
        </cc:local-out>
        <cc:local-out id="call-produceRemit" store-message="none" endpoint="vm://Supplier_Remittance_PDF/produceRemit" propagate-abort="true"/>
        <cc:local-in id="getRemitInfo" routes-to="writePymntMsg"/>
        <cc:async-mediation id="RemitInfo" routes-to="PIMInfoMsg">
            <cc:steps>
                <cc:copy id="Copy" output="variable" output-variable="varPayMsg"/>
                <cc:eval id="Eval"><cc:expression>props['p.company.prompt'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Company_Reference/wd:ID[@wd:type = 'WID']&quot;)</cc:expression><cc:expression>props['p.supplier.name'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Receiving_Party_Contact_Data/wd:Payee_Name&quot;)</cc:expression><cc:expression>props['p.supplier.ref.id'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Receiving_Party_Reference/wd:ID[@wd:type='Supplier_ID']&quot;)</cc:expression><cc:expression>props['p.set.run.num'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Settlement_Run_Reference/wd:ID[@wd:type='WID']&quot;)</cc:expression><cc:expression>props['p.total.invoices'] = parts[0].xpath('count(wd:Payment/wd:Payment_Data/wd:Remittance_Data/wd:Document_Remittance_Data)')</cc:expression><cc:expression>props['p.company.refid'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Company_Reference/wd:ID[@wd:type = 'Company_Reference_ID']&quot;)</cc:expression><cc:expression>props['p.payment.category'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Payment_Group_Data/wd:Payment_Category_Reference/wd:ID[@wd:type = 'Payment_Category_ID']&quot;)</cc:expression><cc:expression>props['p.error'] = false</cc:expression>
                    <cc:expression>props['p.masked.account'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Receiving_Party_Bank_Data/wd:Masked_Account_Number&quot;)</cc:expression>
                    <cc:expression>props['p.bank.account.name'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Receiving_Party_Bank_Data/wd:Bank_Account_Name&quot;)</cc:expression>
                    <cc:expression>props['p.bank.sort.code'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Receiving_Party_Bank_Data/wd:Bank_ID_Number&quot;)</cc:expression>
                    <cc:expression>props['p.supplier.id'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Receiving_Party_Reference/wd:ID[@wd:type = 'Supplier_ID']&quot;)</cc:expression>
                    <cc:expression>props['p.inv.ref'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Remittance_Data/wd:Document_Remittance_Data/wd:Document_Reference&quot;)</cc:expression>
                    <cc:expression>props['p.sup.email'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Receiving_Party_Contact_Data/wd:Email_Address_Data/wd:Email_Address&quot;)</cc:expression>
                    <cc:expression>props['p.transaction.ref'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Reference/wd:ID[@wd:type = 'EFT_Payment_ID']&quot;)</cc:expression>
                    <cc:expression>props['test'] = parts[0].xpath(&quot;wd:Payment/wd:Payment_Data/wd:Remittance_Data/wd:Document_Remittance_Data/wd:Document_ID&quot;)</cc:expression></cc:eval>
                <cc:validate-exp id="ValidateExp">
                    <cc:expression failure-message="'Could not retrieve Company information'">props['p.company.refid'] != empty</cc:expression>
                    <cc:expression failure-message="'Could not retrieve Supplier.'">props['p.supplier.ref.id'] != empty</cc:expression>
                </cc:validate-exp>
            </cc:steps>
            <cc:send-error id="SendError" routes-to="call-handleError2"/>
        </cc:async-mediation>
        <cc:local-out id="call-getRemitInfo" store-message="none" endpoint="vm://Supplier_Remittance_PDF/getRemitInfo"/>
        <cc:local-in id="produceRemit" routes-to="call-getInvInfo"/>
        <cc:local-in id="getCompanyInfo" routes-to="GetCompanyXML"/>
        <cc:local-out id="call-handleError3" store-message="none" endpoint="vm://Supplier_Remittance_PDF/handleError" propagate-abort="true"/>
        <cc:workday-out-soap id="getCompany-WWS" routes-response-to="GetCompanyProps" application="Financial_Management" version="29.0"/>
        <cc:async-mediation id="GetCompanyProps">
            <cc:steps>
                <cc:eval id="Eval"><cc:expression>props['p.company.address1'] = parts[0].xpath(&quot;env:Envelope/env:Body/wd:Get_Workday_Companies_Response/wd:Response_Data/wd:Company/wd:Company_Data/wd:Contact_Data/wd:Address_Data[wd:Usage_Data/@wd:Public = '1' and wd:Usage_Data/wd:Use_For_Reference/wd:ID[@wd:type='Communication_Usage_Behavior_ID']/text()='REMIT']/wd:Address_Line_Data[@wd:Type='ADDRESS_LINE_1']&quot;)</cc:expression><cc:expression>props['p.company.address2'] = parts[0].xpath(&quot;env:Envelope/env:Body/wd:Get_Workday_Companies_Response/wd:Response_Data/wd:Company/wd:Company_Data/wd:Contact_Data/wd:Address_Data[wd:Usage_Data/@wd:Public = '1' and wd:Usage_Data/wd:Use_For_Reference/wd:ID[@wd:type='Communication_Usage_Behavior_ID']/text()='REMIT']/wd:Address_Line_Data[@wd:Type='ADDRESS_LINE_2']&quot;)</cc:expression><cc:expression>props['p.company.address3'] = parts[0].xpath(&quot;env:Envelope/env:Body/wd:Get_Workday_Companies_Response/wd:Response_Data/wd:Company/wd:Company_Data/wd:Contact_Data/wd:Address_Data[wd:Usage_Data/@wd:Public = '1' and wd:Usage_Data/wd:Use_For_Reference/wd:ID[@wd:type='Communication_Usage_Behavior_ID']/text()='REMIT']/wd:Address_Line_Data[@wd:Type='ADDRESS_LINE_3']&quot;)</cc:expression><cc:expression>props['p.company.city'] = parts[0].xpath(&quot;env:Envelope/env:Body/wd:Get_Workday_Companies_Response/wd:Response_Data/wd:Company/wd:Company_Data/wd:Contact_Data/wd:Address_Data[wd:Usage_Data/@wd:Public = '1' and wd:Usage_Data/wd:Use_For_Reference/wd:ID[@wd:type='Communication_Usage_Behavior_ID']/text()='REMIT']/wd:Municipality&quot;)</cc:expression><cc:expression>props['p.company.state'] = parts[0].xpath(&quot;env:Envelope/env:Body/wd:Get_Workday_Companies_Response/wd:Response_Data/wd:Company/wd:Company_Data/wd:Contact_Data/wd:Address_Data[wd:Usage_Data/@wd:Public = '1' and wd:Usage_Data/wd:Use_For_Reference/wd:ID[@wd:type='Communication_Usage_Behavior_ID']/text()='REMIT']/wd:Country_Region_Reference/substring-after(wd:ID[@wd:type='Country_Region_ID'],'-')&quot;)</cc:expression><cc:expression>props['p.company.postal'] = parts[0].xpath(&quot;env:Envelope/env:Body/wd:Get_Workday_Companies_Response/wd:Response_Data/wd:Company/wd:Company_Data/wd:Contact_Data/wd:Address_Data[wd:Usage_Data/@wd:Public = '1' and wd:Usage_Data/wd:Use_For_Reference/wd:ID[@wd:type='Communication_Usage_Behavior_ID']/text()='REMIT']/wd:Postal_Code&quot;)</cc:expression><cc:expression>props['p.company.phone'] = parts[0].xpath(&quot;env:Envelope/env:Body/wd:Get_Workday_Companies_Response/wd:Response_Data/wd:Company/wd:Company_Data/wd:Contact_Data/wd:Phone_Data[wd:Usage_Data/@wd:Public = '1' and wd:Usage_Data/wd:Use_For_Reference/wd:ID[@wd:type='Communication_Usage_Behavior_ID']/text()='REMIT']/concat(wd:Area_Code,'-',wd:Phone_Number)&quot;)</cc:expression></cc:eval>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="GetCompanyXML" routes-to="getCompany-WWS">
            <cc:steps>
                <cc:write id="Write">
                    <cc:message>
                        <cc:text>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xD;
&lt;env:Envelope&#xD;
    xmlns:env=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&#xD;
    xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;>&#xD;
    &lt;env:Body>&#xD;
        &lt;wd:Get_Workday_Companies_Request&#xD;
            xmlns:wd=&quot;urn:com.workday/bsvc&quot;&#xD;
            wd:version=&quot;v29.0&quot;>&#xD;
            &lt;wd:Request_References>&#xD;
                &lt;wd:Company_Reference>&#xD;
                    &lt;wd:ID wd:type=&quot;Company_Reference_ID&quot;>@{props['p.company.refid']}&lt;/wd:ID>&#xD;
                &lt;/wd:Company_Reference>&#xD;
            &lt;/wd:Request_References>&#xD;
            &lt;wd:Response_Filter>&#xD;
                &lt;wd:Page>1&lt;/wd:Page>&#xD;
                &lt;wd:Count>1&lt;/wd:Count>&#xD;
            &lt;/wd:Response_Filter>&#xD;
        &lt;/wd:Get_Workday_Companies_Request>&#xD;
    &lt;/env:Body>&#xD;
&lt;/env:Envelope></cc:text>
                    </cc:message>
                </cc:write>
            </cc:steps>
            <cc:send-error id="SendError" routes-to="call-handleError3"/>
        </cc:async-mediation>
        <cc:local-out id="call-handleError4" store-message="none" endpoint="vm://Supplier_Remittance_PDF/handleError" propagate-abort="true"/>
        <cc:async-mediation id="CreateRptXML" routes-to="call-createPDF" handle-downstream-errors="true">
            <cc:steps>
                <cc:xslt-plus id="XsltPlus" input="variable" input-variable="varPayMsg" url="CreateRemitXML2.xsl"/>
            </cc:steps>
            <cc:send-error id="SendError" routes-to="call-handleError4"/>
        </cc:async-mediation>
        <cc:local-out id="call-createPDF" store-message="none" endpoint="vm://Supplier_Remittance_PDF/createPDF" propagate-abort="true"/>
        <cc:local-in id="generateSupInvRpt" routes-to="CreateRptXML"/>
        <cc:local-in id="createPDF" routes-to="Write-PDF-File"/>
        <cc:local-out id="storeFilePIM" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="'Attached output file.'"/>
            <cc:set name="is.document.deliverable" value="'true'"/>
            <cc:set name="is.document.variable.name" value="'wd.report.file'"/>
        </cc:local-out>
        <cc:local-out id="call-handleError5" store-message="none" endpoint="vm://Supplier_Remittance_PDF/handleError" propagate-abort="true"/>
        <cc:async-mediation id="storeFile" routes-to="storeFilePIM">
            <cc:steps>
                <cc:eval id="Eval"><cc:expression>props['p.filename'] = props['p.supplier.name'] + '_' + props['lp.remit'] + '_' + props['seqgen.filename']</cc:expression></cc:eval>
                <cc:store description="Storing @{props['p.filename']}" id="Store" output="variable" output-variable="wd.report.file" contentDisposition="attachment;filename=&quot;@{props['p.filename']}&quot;" expiresIn="P@{props['ia.document.retention']}D" title="@{props['p.filename']}"/>
            </cc:steps>
        </cc:async-mediation>
        <cc:async-mediation id="Write-PDF-File" routes-to="Generate-PDF" handle-downstream-errors="true">
            <cc:steps>
                <cc:eval id="Eval"><cc:expression>props['rpt.design'] = 'report_designs/Supplier_Remittance_Statement_Electronic_v1.1.rptdesign'</cc:expression></cc:eval>
                <cc:copy id="Copy" output="variable" output-variable="v_report_data"/>
                <cc:write id="WriteDesign" output="variable" output-variable="v_report_design">
                    <cc:message>
                        <cc:static-file input-file="@{props['rpt.design']}"/>
                    </cc:message>
                </cc:write>
            </cc:steps>
            <cc:send-error id="SendError" routes-to="call-handleError5"/>
        </cc:async-mediation>
        <cc:local-out id="Generate-PDF" routes-response-to="storeFile" endpoint="vm://wcc/PdfPrintStep">
            <cc:set name="pdf.report.design.variable" value="'v_report_design'"/>
            <cc:set name="pdf.workday.report.variable" value="'v_report_data'"/>
            <cc:set name="pdf.apply.report.design.per.row" value="true"/>
        </cc:local-out>
        <cc:local-out id="Report-CriticalError" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.message.severity" value="'CRITICAL'"/>
            <cc:set name="is.message.summary" value="'CRITICAL GLOBAL ERROR IN INTEGRATION'"/>
            <cc:set name="is.event.wid" value="lp.isSet() ? lp.getIntegrationEventWID() : null"/>
            <cc:set name="is.system.wid" value=" lp.isSet() ? lp.getIntegrationSystemRefWID() : null"/>
            <cc:set name="is.message.detail" value="util.cleanString(context.getErrorMessage())&#x9;"/>
        </cc:local-out>
        <cc:send-error id="Error-GlobalErrorHanlder" routes-to="Report-CriticalError"/>
        <cc:local-out id="call-getInvInfo" store-message="none" endpoint="vm://Supplier_Remittance_PDF/getInvoiceRep" propagate-abort="true"/>
        <cc:local-out id="call-generateSupInvRpt" store-message="none" execute-when="props['p.payment.category'] == 'SUPPLIER'" routes-response-to="PutIntegrationMessage" endpoint="vm://Supplier_Remittance_PDF/generateSupInvRpt" propagate-abort="true"/>
        <cc:local-out id="PutIntegrationMessage" execute-when="props['p.payment.category'] == 'AD_HOC'" endpoint="vm://wcc/PutIntegrationMessage">
            <cc:set name="is.message.severity" value="'INFO'"/>
            <cc:set name="is.message.summary" value="'Remittance not produced.  Ad Hoc payments are not configured to produce a remittance.'"/>
        </cc:local-out>
        <cc:local-in id="getInvoiceRep" routes-to="Route"/>
        <cc:workday-out-rest id="getReporInvoiceData" routes-response-to="Splitter" extra-path="@{intsys.reportService.getExtrapath('SupInfo')}?format=simplexml&amp;Payment_Reference_Number=@{props['p.transaction.ref']}"/>
        <cc:local-out id="CallCompInf" store-message="none" endpoint="vm://Supplier_Remittance_PDF/callCompInf"/>
        <cc:local-in id="callCompInf" routes-to="callGetComp"/>
        <cc:local-out id="call_handleError3" store-message="none" endpoint="vm://Supplier_Remittance_PDF/handleError"/>
        <cc:splitter id="Splitter">
            <cc:sub-route name="SubRoute" routes-to="AsyncMediation"/>
            <cc:xml-stream-splitter namespaces="wd urn:com.workday.report/CR_Supplier_Invoice_-_Info" xpath="/wd:Report_Data/wd:Report_Entry"/>
        </cc:splitter>
        <cc:local-out id="callGetComp" store-message="none" routes-response-to="call-generateSupInvRpt" endpoint="vm://Supplier_Remittance_PDF/getCompanyInfo"/>
        <cc:route id="Route">
            <cc:mvel-strategy>
                <cc:choose-route expression="props['p.transaction.ref'] != ''" route="SubRoute"/>
                <cc:choose-route expression="props['p.transaction.ref'] == ''" route="Alternate"/>
            </cc:mvel-strategy>
            <cc:sub-route name="SubRoute" routes-to="getReporInvoiceData"/>
            <cc:sub-route name="Alternate" routes-to="CallCompInf"/>
        </cc:route>
        <cc:async-mediation id="AsyncMediation" routes-to="AggregateStaff">
            <cc:steps>
                <cc:eval id="Eval">
                    <cc:expression>props['p.invoice.desc'] = parts[0].xpath('wd:Report_Entry/wd:Supplier_Invoice_Lines_group/wd:Line_Item_Description', 'wd urn:com.workday.report/CR_Supplier_Invoice_-_Info')</cc:expression>
                    <cc:expression>props['p.claim.num'] = parts[0].xpath('wd:Report_Entry/wd:EMI_SUP_Invoices_group/wd:Claim_Number', 'wd urn:com.workday.report/CR_Supplier_Invoice_-_Info')</cc:expression>
                    <cc:expression>props['p.sup.cat'] = parts[0].xpath('wd:Report_Entry/wd:Supplier_Category', 'wd urn:com.workday.report/CR_Supplier_Invoice_-_Info')</cc:expression>
                    <cc:expression>//props['keyHash'] = parts[0].xpath('wd:Report_Entry/wd:CF_EMI_Invoice_Payment_group/wd:instanceID', 'wd urn:com.workday.report/CR_Supplier_Invoice_-_Info')</cc:expression>
                    <cc:expression>//props['delimiter'] = props['keyHash'].toString().indexOf('$')</cc:expression>
                    <cc:expression>//props['keyHash3'] = props['keyHash'].toString().substring(props['delimiter']+1)</cc:expression>
                    <cc:expression>props['claimSet'].put(props['keyHash'].toString(), props['p.claim.num'].toString())</cc:expression>
                    <cc:expression>props['descSet'].put(props['keyHash'].toString(), props['p.invoice.desc'])</cc:expression>
                    <cc:expression>props['keyHash'] = props['keyHash'] + 1</cc:expression>
                </cc:eval></cc:steps>
            <cc:send-error id="SendError" routes-to="call_handleError3"/>
        </cc:async-mediation>
        <cc:aggregator id="AggregateStaff" routes-to="CallCompInf">
            <cc:size-batch-strategy batch-size="-1"/>
            <cc:message-content-collater/>
        </cc:aggregator>
	</cc:assembly>

</beans>